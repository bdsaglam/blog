{
  
    
        "post0": {
            "title": "Fourier Transform",
            "content": "Fourier transform decomposes a signal into the sinusoidal components with different amplitude, frequency and phases such that the sum of those components equals to the signal. It transforms a signal from time domain to frequency domain. Fourier transform is applicable to both continuous and discrete signals. In this post, we will only cover the discrete case. . For a signal with N points, Discrete Fourier Transform uses the following bases: . $e^{i~2 pi~k} = cos (2 pi~k)+i sin (2 pi~k)$ . for k = -N/2 ... N/2 where k=1 means 1 cycle per signal. . Nyquist&#39;s Sampling Theorem . To be able to measure a sinusoidal wave, we need to sample at least two points within its one full cycle, i.e., one point in half cycle. Therefore, we cannot measure the components that make more than N/2 cycles within N timesteps. This is known as Nyquist&#39;s sampling theorem. In practice, because of the risk of sampling those two points near zero crossings, we are only confident about the components with frequencies lower than N/4. . As an example, let&#39;s see the measurements from 1 Hz sine wave with various sampling rates. Nyquist&#39;s sampling theorem requires at least 2 Hz sampling rate for this signal. As you can see in the figure below, the sampling rate of 1 Hz (blue) measures a flat line. While sampling rate of 2 Hz (orange) is theoretically sufficent, its amplitude is far from the original&#39;s. As the sampling rate increases, the measurement becomes more accurate. . %matplotlib inline import matplotlib.pyplot as plt import numpy as np . # Original signal w = 1 # frequency of sine wave, [Hz] T = 3 # duration of signal [second] fs = 128 # underlying sampling rate of signal[Hz] t = np.linspace(0, T, fs * T) y = np.sin(2*np.pi*w*t) indices = np.arange(len(t)) fs_list = [1, 2, 4, 10] samples = [] for f in fs_list: offset = np.random.randint(0, 10) idx = indices[:-offset:fs//f] + offset t_sampled = t[idx] y_sampled = y[idx] samples.append((f, t_sampled, y_sampled)) . plt.figure(figsize=(12, 8)) plt.plot(t, y, color=&#39;magenta&#39;, lw=4); legends = [&#39;Original signal&#39;] for f, ts, ys in samples: plt.plot(ts, ys, marker=&#39;o&#39;, ms=10, linestyle=&#39;--&#39;, lw=4); legends.append(f&#39;Fsamp = {f}ω&#39;) plt.legend(legends, loc=&#39;lower left&#39;) plt.xlim([0, 2]); . Discrete Fourier Transform . Discrete Fourier Transform . $ X_k = sum_{n=0}^{N-1} x_n cdot e^{-i~2 pi~k~n~/~N} $ . Inverse Discrete Fourier Transform . $ x_n = frac{1}{N} sum_{k=0}^{N-1} X_k e^{i~2 pi~k~n~/~N} $ . The intuition behind first formula is that kth cosine component takes k/N cycles in 1 timestep or point interval. In other words, its angular velocity is 2πk/N radians/timestep. To make kth component&#39;s peak align with nth point, we need adjust the phase of kth component. Since it takes 2πk/N radians in one timestep, until nth point, it takes 2πkn/N radians. Therefore, we need to delay this component for 2πkn/N radians. To delay, we need to subtract from its phase, which means rotating its complex representation in negative/counter-clock-wise direction. Hence, there is a minus sign in front. . From the above formula, for N point signal, a naive Fourier Transform algorithm has O(N2) time complexity. However, Cooley and Tukey (1965) proposed an O(N*lgN) algorithm, hence, Fast Fourier Transform. It benefits the symmetry in the problem and uses recursive divide-conquer approach. Checkout this detailed explanation of FFT algorithm, if you&#39;re interested. . Numpy provides FFT algorithm in numpy.fft subpackage along with some utilities. . Let&#39;s have a signal consisting of two sinusoidal waves with 5 Hz and 10 Hz and uniform noise. Since FFT makes recursive calls to divide the signal into two halves, the number of points in the signal must be power of 2. . fs = 128 # sampling rate, [Hz] T = 1 # duration of signal, [second] t = np.linspace(0, T, fs) N = len(t) . components = [ (1, 5, np.pi/4), # amplitude, frequency [Hz], phase [radian] (2, 10, 0), ] signal = sum([a * np.cos(2*np.pi*w*t + p) for (a, w, p) in components]) noise = 1*np.random.uniform(-1, 1, N) x = signal + noise . plt.figure(figsize=(12, 6)) plt.plot(t, x) plt.xlabel(&quot;Time [second]&quot;); . DFT produces N complex coefficients xk per each component with frequency of k. Here, k denotes normalized frequency with unit of cycle/point and it ranges from -0.5 to 0.5. We can convert these frequencies to Hertz, by substituting point with time interval between consecutive points. . $$ frac{cycle}{point} = frac{cycle}{ frac{t~seconds}{N~points}} = frac{N}{t} * frac{cycle}{second} = frac{N}{t}~Hz $$Numpy provides a utility function numpy.fft.fftfreq, that takes number of points in DFT and timestep which is multiplicative inverse of sampling rate. . N = len(signal) xk = np.fft.fft(x) freq = np.fft.fftfreq(n=N, d=1/fs) . print(xk[:5]) . [-7.59644306+0.j -0.31847512+9.55567417j -0.6212007 -4.70779516j 4.16027703+6.99437815j 9.82600143-0.02623135j] . print(freq) . [ 0. 1. 2. 3. 4. 5. 6. 7. 8. 9. 10. 11. 12. 13. 14. 15. 16. 17. 18. 19. 20. 21. 22. 23. 24. 25. 26. 27. 28. 29. 30. 31. 32. 33. 34. 35. 36. 37. 38. 39. 40. 41. 42. 43. 44. 45. 46. 47. 48. 49. 50. 51. 52. 53. 54. 55. 56. 57. 58. 59. 60. 61. 62. 63. -64. -63. -62. -61. -60. -59. -58. -57. -56. -55. -54. -53. -52. -51. -50. -49. -48. -47. -46. -45. -44. -43. -42. -41. -40. -39. -38. -37. -36. -35. -34. -33. -32. -31. -30. -29. -28. -27. -26. -25. -24. -23. -22. -21. -20. -19. -18. -17. -16. -15. -14. -13. -12. -11. -10. -9. -8. -7. -6. -5. -4. -3. -2. -1.] . # the frequencies normalized_freq = np.fft.fftfreq(n=N) freq_manual = normalized_freq * N / T assert np.allclose(freq, freq_manual) . # Bring negative frequencies to the front of the array fr = np.roll(freq, N//2) amp = np.roll(np.abs(xk), N//2) phase = np.roll(np.angle(xk), N//2) . fig, axes = plt.subplots(figsize=(12, 8), nrows=2, sharex=True) axes[0].plot(fr, amp) axes[0].set_ylabel(&quot;Amplitude&quot;); axes[0].set_xlabel(&quot;Frequency [Hz]&quot;) axes[1].bar(fr, phase) axes[1].set_ylabel(&quot;Phase [radian]&quot;) axes[1].set_xlabel(&quot;Frequency [Hz]&quot;) . Text(0.5, 0, &#39;Frequency [Hz]&#39;) . Inverse Discrete Fourier Transform . $ x_n = frac{1}{N} sum_{k=0}^{N-1} X_k e^{i~2 pi~k~n~/~N} $ . Now, we have the information about each of the components in the signal. We can reconstruct the original signal, by combining those components. For this, we first convert each coefficient xk into cosine and sine waves by multiplying with $e^{i~2 pi~k~n~/~N}$. Then, we sum all these waves per component and normalize it by number of points. . Numpy provides inverse FFT function numpy.fft.ifft, which takes N complex coefficients x_k and outputs N complex numbers with very small imaginary parts. Remember, . $$e^{ix} = cos (x)+i sin (x)$$ $$ cos(-x) = cos(x) $$ $$ sin(-x) = -sin(x) $$ . Therefore, while summing up the components, the imaginary parts (sine) for negative and positive frequencies cancels each other. Whereas, real parts (cosine) add up. . rec_signal = np.real(np.fft.ifft(xk)) . plt.figure(figsize=(12, 6)) plt.plot(signal) plt.plot(rec_signal) plt.xlabel(&quot;Time [second]&quot;) plt.legend([&quot;Original&quot;, &quot;Reconstructed&quot;]); . Components . def get_component_params(xk, freq): component = 2 * xk[freq] # multiply by two to include -freq as well phase = np.angle(component) amplitude = np.abs(component) / N return amplitude, phase . def make_component_signal(xk, freq, t): amplitude, phase = get_component_params(xk, freq) component_signal = amplitude * np.cos(2 * np.pi * freq * t + phase) return component_signal . for a, f, ph in components: amp, phase = get_component_params(xk, f) print(f&quot;Component {f} Hz&quot;) print(f&quot;Given amplitude: {a:4.2f} phase: {np.rad2deg(ph):4.1f} deg&quot;) print(f&quot;Found amplitude: {amp:4.2f} phase: {np.rad2deg(phase):4.1f} deg&quot;) print(&#39;=&#39;*40) . Component 5 Hz Given amplitude: 1.00 phase: 45.0 deg Found amplitude: 1.09 phase: 49.2 deg ======================================== Component 10 Hz Given amplitude: 2.00 phase: 0.0 deg Found amplitude: 1.98 phase: 13.1 deg ======================================== . c5 = make_component_signal(xk, 5, t) . c10 = make_component_signal(xk, 10, t) . plt.figure(figsize=(12, 6)) plt.plot(t, signal, linewidth=2) plt.plot(t, c5, t, c10) plt.xlabel(&quot;Time [second]&quot;) plt.legend([&#39;Original signal&#39;, &#39;5 Hz component&#39;, &#39;10 Hz component&#39;]); . Conclusion . FFT transforms a signal from time domain to frequency domain and for some problems, frequency domain is more feasible to work with. FFT has usages in many fields such as, . Solving differential equations | Signal filtering algorithms | System identification | .",
            "url": "https://bdsaglam.github.io/blog/jupyter/2020/06/23/fourier-transform.html",
            "relUrl": "/jupyter/2020/06/23/fourier-transform.html",
            "date": " • Jun 23, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://bdsaglam.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://bdsaglam.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://bdsaglam.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bdsaglam.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}